name: rust

on:
  push:
    branches:
      - main
      - develop
      - release/*
  pull_request:
    branches:
      - main
      - develop
      - release/*

jobs:
  build-and-validate:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - toolchain: stable
            RUSTDOCFLAGS: "-D warnings"
            DOCTYPE: "docrs"
          - toolchain: nightly
            RUSTDOCFLAGS: "-D warnings --cfg docsrs"
            DOCTYPE: "doc"

    name: "Build and validate (${{ matrix.toolchain}})"
    env:
      CARGO_TERM_COLOR: always
      RUSTFLAGS: -D warnings
      RUSTDOCFLAGS: ${{ matrix.RUSTDOCFLAGS }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache Cargo Registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo Git Index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      - name: Install Rust (Matrix)
        shell: pwsh
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

      - name: Lint with Clippy (Stable Only)
        if: matrix.toolchain == 'stable'
        run: cargo clippy --all-targets --features="runtime-features"

      - name: Check Code Formatting (Stable Only)
        if: matrix.toolchain == 'stable'
        run: cargo fmt -- --check

      - name: Build the Project with nuget
        run: cargo build --features="runtime-features" --verbose

      - name: Build the Project without nuget
        run: cargo build --all-features --verbose

      - name: Run Tests
        run: cargo test --features="runtime-features" --verbose

      - name: Generate Documentation (${{ matrix.DOCTYPE }}, ${{ matrix.toolchain }})
        run: cargo doc --no-deps --features="runtime-features"

      - name: Install and Run Security Audit (Nightly Only)
        if: matrix.toolchain == 'nightly'
        run: |
          cargo install cargo-audit
          cargo audit

  cross-compile:
    name: "Cross Compilation for Windows (${{ matrix.target }}) on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        target: [x86_64-pc-windows-gnu]
    env:
      CARGO_TERM_COLOR: always
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1  # 🔍 Enable stack traces on error
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Debug System Information
        run: |
          echo "== SYSTEM INFORMATION =="
          uname -a
          rustc --version
          cargo --version
          echo "== ENVIRONMENT VARIABLES =="
          env | sort
          echo "== PATH =="
          echo $PATH

      - name: Install Rust Stable Toolchain
        run: |
          rustup update stable
          rustup default stable
          rustup target add ${{ matrix.target }}

      - name: 🛠 Install MinGW for cross-compilation (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64
          echo "== CHECK INSTALLED FILES =="
          which x86_64-w64-mingw32-gcc
          x86_64-w64-mingw32-gcc --version
          echo "== CHECK HEADERS =="
          find /usr -name "Windows.h"
          echo "== CHECK LIBRARIES =="
          ls -l /usr/lib/gcc/x86_64-w64-mingw32/

      - name: 🛠 Install MinGW for cross-compilation (macOS)
        if: runner.os == 'macos'
        run: |
          brew update
          brew install mingw-w64
          echo "== CHECK INSTALLED FILES =="
          which x86_64-w64-mingw32-gcc
          x86_64-w64-mingw32-gcc --version
          echo "== CHECK HEADERS =="
          find /usr/local -name "Windows.h"
          echo "== CHECK LIBRARIES =="
          ls -l /usr/local/opt/mingw-w64/lib

      - name: Configure linker
        run: |
          mkdir -p .cargo
          cat > .cargo/config.toml << EOF
          [target.${{ matrix.target }}]
          linker = "x86_64-w64-mingw32-gcc"
          EOF

      - name: 🔍 Debug Cargo Configuration
        run: |
          echo "== DEBUG CARGO CONFIGURATION =="
          cat .cargo/config.toml || echo "No Cargo config found"

      - name: 🔍 Debug Compilation Environment
        run: |
          echo "== DEBUG COMPILATION ENVIRONMENT =="
          x86_64-w64-mingw32-gcc -v
          echo "== CHECK LIBRARY PATHS =="
          echo $LIBRARY_PATH
          echo "== CHECK INCLUDE PATHS =="
          echo $C_INCLUDE_PATH
          echo "== LIST FILES IN TARGET DIRECTORY =="
          ls -R target/ || echo "No target directory found"

      - name: Build Project for Windows Target
        run: |
          cargo build --target ${{ matrix.target }} --all-features --verbose
