name: Create GitHub Release

on:
  push:
    tags:
      - "v*"

  workflow_run:
    workflows: ["Tag on Merge to Main"]
    types:
      - completed

permissions:
  contents: write
  packages: write

jobs:
  determine-tag:
    if: github.event_name == 'workflow_run'
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Retrieve the latest tag via the GitHub API
        id: get_tag
        run: |
          LATEST_TAG=$(gh api repos/${{ github.repository }}/git/matching-refs/tags/v --jq '.[-1].ref' | sed 's|refs/tags/||')
          if [[ -z "$LATEST_TAG" ]]; then
            echo "No tag found. Stopping workflow."
            exit 1
          fi
          echo "tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-and-release:
    needs: determine-tag
    runs-on: windows-latest
    env:
      CARGO_TERM_COLOR: always
      RUSTFLAGS: -D warnings
      # Define the tag based on the triggering event
      TAG_NAME: ${{ github.event_name == 'push' && github.ref_name || needs.determine-tag.outputs.tag_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Cargo Registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo Git Index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      - name: Install Rust
        shell: pwsh
        run: rustup update stable && rustup default stable

      - name: Install PSSemVer
        shell: pwsh
        run: |
          try {
            Import-Module -Name PSSemVer -ErrorAction Stop
          } catch {
            Write-Host "Installing PSSemVer module..."
            Install-Module -Name PSSemVer -Scope CurrentUser -Force -ErrorAction Stop
            Import-Module -Name PSSemVer -ErrorAction Stop
          }

      - name: Validate tag with PSSemVer
        id: validate
        shell: pwsh
        run: |
          # Extract the tag name by removing the "v" prefix
          $tagName = "${{ env.TAG_NAME }}"
          Import-Module -Name PSSemVer -ErrorAction Stop
          try {
              $rawVersion = $tagName -replace '^v', ''
              $Version = [PSSemVer]::Parse($rawVersion)
              
              # Convert the prerelease boolean to lowercase string
              $prereleaseValue = ($Version.Prerelease -ne $null).ToString().ToLower()
              echo "prerelease=$prereleaseValue" >> $env:GITHUB_ENV

              # Check the metadata field for the NuGet version
              if (-not [string]::IsNullOrEmpty($Version.BuildMetadata)) {
                echo "nuget_version=$($Version.BuildMetadata)" >> $env:GITHUB_ENV
              } else {
                Write-Host "No metadata found in the tag. Using the version without metadata for NuGet."
                echo "nuget_version=$rawVersion" >> $env:GITHUB_ENV
              }
          } catch {
              Write-Error "The tag name does not contain a valid semantic version. Current tag: $tagName"
              exit 1
          }
        continue-on-error: false

      - name: Run Cargo Publish in Dry-Run Mode
        run: cargo publish --dry-run

      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.prerelease == 'true' && 'Prerelease' || 'Release' }} ${{ env.TAG_NAME }}
          body: |
            This is a **${{ env.prerelease == 'true' && 'prerelease' || 'release' }}** of **${{ github.repository }}**.
            - The crate is available on [Crates.io](https://crates.io/crates/${{ github.repository }}).
            - This version provides bindings for **WSLPluginAPI v${{ env.nuget_version }}**, which can be found on [NuGet](https://www.nuget.org/packages/Microsoft.WSL.PluginApi/${{ env.nuget_version }}).
          prerelease: ${{ env.prerelease == 'true' }}

      - name: Cargo Publish Cargo
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
