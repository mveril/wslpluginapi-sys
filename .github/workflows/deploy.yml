name: Create GitHub Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  validate-and-release:
    runs-on: windows-latest
    env:
      CARGO_TERM_COLOR: always
      RUSTFLAGS: -D warnings

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Cargo Registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo Git Index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      - name: Install Rust
        shell: pwsh
        run: rustup update stable && rustup default stable

      - name: Install PSSemVer
        shell: pwsh
        run: |
          try {
            Import-Module -Name PSSemVer -ErrorAction Stop
          } catch {
            Write-Host "Installing PSSemVer module..."
            Install-Module -Name PSSemVer -Scope CurrentUser -Force -ErrorAction Stop
            Import-Module -Name PSSemVer -ErrorAction Stop
          }

      - name: Validate Tag with PSSemVer
        id: validate
        shell: pwsh
        run: |
          # Récupère le nom du tag en supprimant le préfixe "v"
          $tagName = "${{ github.ref_name }}"
          Import-Module -Name PSSemVer -ErrorAction Stop
          try {
              $rawVersion = $tagName -replace '^v', ''
              $Version = [PSSemVer]::Parse($rawVersion)
              
              # Forcer le booléen à une chaîne en minuscules
              $prereleaseValue = ($Version.Prerelease -ne $null).ToString().ToLower()
              echo "prerelease=$prereleaseValue" >> $env:GITHUB_ENV

              # Vérifier que le champ metadata est renseigné pour la version NuGet
              if (-not [string]::IsNullOrEmpty($Version.metadata)) {
                echo "nuget_version=$($Version.metadata)" >> $env:GITHUB_ENV
              } else {
                Write-Error "Metadata is empty. Cannot determine NuGet version."
                exit 1
              }
          } catch {
              Write-Error "Tag name does not contain a valid semantic version. Current tag: $tagName"
              exit 1
          }
        continue-on-error: false

      - name: Cargo Publish Dry-Run
        run: cargo publish --dry-run

      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ env.prerelease == 'true' && 'Prerelease' || 'Release' }} ${{ github.ref_name }}
          body: |
            This is a ${{ env.prerelease == 'true' && 'prerelease' || 'release' }} of the crate.
            You can find the [crate here](https://crates.io/crates/${{ github.repository }}).
            This version is a binding for the WSLPluginAPI v${{ env.nuget_version }} available on [NuGet](https://www.nuget.org/packages/Microsoft.WSL.PluginApi/${{ env.nuget_version }}).
          prerelease: ${{ env.prerelease == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cargo Publish
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
