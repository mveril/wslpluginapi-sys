name: Tag on Merge and Deploy

on:
  pull_request:
    types: [closed]
    branches: [main]
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  determine-tag:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.determine.outputs.tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine tag to use
        id: determine
        shell: bash
        run: |
          echo "Event: ${GITHUB_EVENT_NAME}"
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
              if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                  echo "PR merged, creating tag..."
                  branch="${GITHUB_HEAD_REF}"
                  # S'assurer que la branche commence par 'release/'
                  if [[ "$branch" != release/* ]]; then
                      echo "Error: Branch '$branch' does not start with 'release/'"
                      exit 1
                  fi
                  version="${branch#release/}"
                  if [ -z "$version" ]; then
                      echo "Error: Extracted version is empty."
                      exit 1
                  fi
                  tag="v${version}"
                  echo "Creating tag: $tag"
                  git config user.name "GitHub Actions"
                  git config user.email "actions@github.com"
                  git tag "$tag" -a -m "Release version $version"
                  git push origin "$tag"
                  echo "tag=$tag" >> $GITHUB_OUTPUT
              else
                  echo "PR not merged. Doing nothing."
                  # On n'émet pas de tag, ainsi le job suivant sera ignoré.
                  echo "tag=" >> $GITHUB_OUTPUT
                  exit 0
              fi
          elif [ "${GITHUB_EVENT_NAME}" = "push" ]; then
              echo "Push event detected."
              tag="${GITHUB_REF#refs/tags/}"
              if [ -z "$tag" ]; then
                echo "Error: TAG value from push event is empty."
                exit 1
              fi
              echo "Using pushed tag: $tag"
              echo "tag=$tag" >> $GITHUB_OUTPUT
          else
              echo "Error: Unsupported event '${GITHUB_EVENT_NAME}'."
              exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-and-release:
    # Le job de déploiement ne s'exécute que si un tag a été déterminé
    if: ${{ needs.determine-tag.outputs.tag_name != '' }}
    needs: determine-tag
    runs-on: windows-latest
    env:
      # Le tag est accessible dans toutes les étapes via la variable TAG_NAME
      TAG_NAME: ${{ needs.determine-tag.outputs.tag_name }}
      CARGO_TERM_COLOR: always
      RUSTFLAGS: -D warnings
    steps:
      - name: Validate TAG_NAME presence
        shell: pwsh
        run: |
          if (-not $env:TAG_NAME -or $env:TAG_NAME -eq "") {
              Write-Error "TAG_NAME is empty. Aborting deployment."
              exit 1
          } else {
              Write-Host "TAG_NAME is set to $env:TAG_NAME."
          }

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Cargo Registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo Git Index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      - name: Install Rust
        shell: pwsh
        run: rustup update stable && rustup default stable

      - name: Install PSSemVer
        shell: pwsh
        run: |
          try {
            Import-Module -Name PSSemVer -ErrorAction Stop
          } catch {
            Write-Host "Installing PSSemVer module..."
            Install-Module -Name PSSemVer -Scope CurrentUser -Force -ErrorAction Stop
            Import-Module -Name PSSemVer -ErrorAction Stop
          }

      - name: Validate tag with PSSemVer
        id: validate
        shell: pwsh
        run: |
          $tagName = "${env:TAG_NAME}"
          Import-Module -Name PSSemVer -ErrorAction Stop
          try {
              $rawVersion = $tagName -replace '^v', ''
              $Version = [PSSemVer]::Parse($rawVersion)
              $prereleaseValue = ($Version.Prerelease -ne $null).ToString().ToLower()
              echo "prerelease=$prereleaseValue" >> $env:GITHUB_ENV
              if (-not [string]::IsNullOrEmpty($Version.BuildMetadata)) {
                echo "nuget_version=$($Version.BuildMetadata)" >> $env:GITHUB_ENV
              } else {
                Write-Host "No metadata found. Using version without metadata for NuGet."
                echo "nuget_version=$rawVersion" >> $env:GITHUB_ENV
              }
          } catch {
              Write-Error "Invalid semantic version in tag: $tagName"
              exit 1
          }
        continue-on-error: false

      - name: Run Cargo Publish in Dry-Run Mode
        run: cargo publish --dry-run

      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.prerelease == 'true' && 'Prerelease' || 'Release' }} ${{ env.TAG_NAME }}
          body: |
            This is a **${{ env.prerelease == 'true' && 'prerelease' || 'release' }}** release of **${{ github.repository }}**.
            - The crate is available on [Crates.io](https://crates.io/crates/${{ github.repository.name }}).
            - This version provides bindings for **WSLPluginAPI v${{ env.nuget_version }}**, available on [NuGet](https://www.nuget.org/packages/Microsoft.WSL.PluginApi/${{ env.nuget_version }}).
          prerelease: ${{ env.prerelease == 'true' }}

      - name: Cargo Publish on crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
